/******************************************************************************
 * This file was generated by langium-cli 1.2.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import { AstNode, AbstractAstReflection, ReferenceInfo, TypeMetaData } from 'langium';

export type Mermaid = PieChart;

export const Mermaid = 'Mermaid';

export function isMermaid(item: unknown): item is Mermaid {
    return reflection.isInstance(item, Mermaid);
}

export interface PieChart extends AstNode {
    readonly $type: 'PieChart';
    accDescr?: string
    accTitle?: string
    sections: Array<Section>
    showData: boolean
    title?: string
}

export const PieChart = 'PieChart';

export function isPieChart(item: unknown): item is PieChart {
    return reflection.isInstance(item, PieChart);
}

export interface Section extends AstNode {
    readonly $container: PieChart;
    readonly $type: 'Section';
    label: string
    value: number
}

export const Section = 'Section';

export function isSection(item: unknown): item is Section {
    return reflection.isInstance(item, Section);
}

export type MermaidAstType = {
    Mermaid: Mermaid
    PieChart: PieChart
    Section: Section
}

export class MermaidAstReflection extends AbstractAstReflection {

    getAllTypes(): string[] {
        return ['Mermaid', 'PieChart', 'Section'];
    }

    protected override computeIsSubtype(subtype: string, supertype: string): boolean {
        switch (subtype) {
            case PieChart: {
                return this.isSubtype(Mermaid, supertype);
            }
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case 'PieChart': {
                return {
                    name: 'PieChart',
                    mandatory: [
                        { name: 'sections', type: 'array' },
                        { name: 'showData', type: 'boolean' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}

export const reflection = new MermaidAstReflection();
